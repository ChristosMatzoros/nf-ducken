/*
========================================================================================
    nf-16s-pipe Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    outdir   = "outDir"
    tracedir = "${params.outdir}/pipeline_info"

    // Process parameters
    dada2 {
        single {
            trunc_len = 0
            trim_left = 0
            max_ee    = 2.0
        }

        paired {
            trunc_len_f = 0
            trunc_len_r = 0
            trim_left_f = 0
            trim_left_r = 0
            max_ee_f    = 2.0
            max_ee_r    = 2.0
            min_overlap = 12
        }

        trunc_q                        = 2
        pooling_method                 = "independent"
        chimera_method                 = "consensus"
        min_fold_parent_over_abundance = 1.0
        num_threads                    = 1
        num_reads_learn                = 1000000
        hashed_feature_ids             = "True"
    }

    taxa_level       = 5    // collapse to genus
    phred_offset     = 33
    cluster_identity = 0.8

    // Reference files
    otu_ref_url            = "https://data.qiime2.org/2022.2/common/silva-138-99-seqs.qza"
    trained_classifier_url = "https://data.qiime2.org/2022.2/common/silva-138-99-nb-classifier.qza"
    qiime_release          = "2022.2"
    qiime_container        = "quay.io/qiime2/core:${params.qiime_release}"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

singularity {
    enabled    = true
    autoMounts = true
    runOptions = "-B /usr/bin"
}

process {
    // Containerization
    withLabel:singularity_qiime2 {
        container = "${params.qiime_container}"
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss' )
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-16s-pipe'
    author          = 'Food Systems Biotechnology Laboratory of ETH Zurich'
    homePage        = 'https://github.com/lina-kim/nf-16s-pipe'
    description     = 'Process amplicon meta-analysis data, from NCBI accession IDs to taxonomic diversity metrics.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.0.0'
    version = '0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit; copied from nf-core/ampliseq
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}