/*
========================================================================================
    nf-16s-pipe Nextflow base config file
========================================================================================
    Appropriate for general use on most high performance compute environments. Assumes
    that all software is installed and available on the PATH. Runs in `local` mode - all
    jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    // errorStrategy process labels
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // Process-specific resource requirements
    // Taken from nf-core/ampliseq
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'     ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 6.h   * task.attempt, 'time'     ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'     ) }
        memory = { check_max( 42.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 12.h  * task.attempt, 'time'     ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 20     * task.attempt, 'cpus'    ) }
        memory = { check_max( 120.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 48.h  * task.attempt, 'time'     ) }
    }
    withLabel:single_cpu {
        cpus   = { check_max( 1, 'cpus'                        ) }
    }
    withLabel:process_local {
        cpus   = { 1     * task.attempt }
        memory = { 16.GB * task.attempt }
        time   = { 6.h   * task.attempt }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory'  ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}

tower {
    enabled = false
}
